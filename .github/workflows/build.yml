name: CI web

on:
  push:
    branches: [ dev, prod ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2

  push_to_registry:
    name: Push Docker image to GitHub Packages
    needs: build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: docker.pkg.github.com/alejoramirezgismondi/jibber-jabber-web/web-${{ steps.extract_branch.outputs.branch }}:latest

  update-server:
    name: Update Server docker image
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Set Production Env variables if prod is target
        if: ${{ steps.extract_branch.outputs.branch == 'prod' }}
        run: |
          echo "VM_IP=$PROD_IP" >> $GITHUB_ENV && echo "VM_USER=$PROD_USER" >> $GITHUB_ENV
        env:
          PROD_IP: ${{ secrets.PROD_IP }}
          PROD_USER: ${{ secrets.PROD_USER }}
      - name: Set Dev Env variables if dev is target
        if: ${{ steps.extract_branch.outputs.branch == 'dev' }}
        run: |
          echo "VM_IP=$DEV_IP" >> $GITHUB_ENV && echo "VM_USER=DEV_USER" >> $GITHUB_ENV
        env:
          DEV_IP: ${{ secrets.DEV_IP }}
          DEV_USER: ${{ secrets.DEV_USER }}
      - name: Deploy
        uses: fifsky/ssh-action@master
        with:
          command: /scripts/restart.sh
          host: ${{ env.VM_IP }}
          user: ${{ env.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
